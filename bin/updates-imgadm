#!/usr/bin/env node
/*
 * Copyright (c) 2012, Joyent, Inc. All rights reserved.
 *
 * CLI for working with the central Joyent SDC Updates Image API:
 *      https://updates.joyent.com
 *
 * Notes:
 * - This server will eventually be hosted at updates.joyent.com.
 * - This is *separate* from the "Joyent Images API": images.joyent.com.
 */

var format = require('util').format;
var CLI = require('../lib/cli');


//---- globals

var NAME = 'updates-imgadm';
var URL = process.env.UPDATES_IMGADM_URL || 'https://updates.joyent.com';
//var URL = 'https://64.30.133.250';
var DESCRIPTION = (
    'Manage images on the central Joyent SDC Updates repo (https://updates.joyent.com).\n'
    + '\n'
    + 'Authentication is required for any modifying endpoints (adding images,\n'
    + 'etc.). To get access, you must have your username and key added\n'
    + 'by the administrator. Then set the following in your\n'
    + 'environment (presuming "~/.ssh/id_rsa.pub" is the key you provided):\n'
    + '\n'
    + '    export UPDATES_IMGADM_USER=<given username>\n'
    + '    export UPDATES_IMGADM_IDENTITY=`ssh-keygen -l -f ~/.ssh/id_rsa.pub \\\n'
    + '        | awk \'{print $2}\' | tr -d \'\\n\'`\n'
    + '\n'
    + 'If setup correctly, `updates-imgadm ping` should work (prints "pong").\n'
    );


//---- support stuff

function logerror(err, verbose) {
    if (err.code) {
        console.error(format('%s: error (%s): %s', NAME, err.code,
            err.message));
    } else {
        console.error(format('%s: error: %s', NAME, err.message));
    }
    if (verbose && err.stack) {
        console.error('\n' + err.stack);
    }
}



//---- mainline

function main(argv) {
    var cli = new CLI({
        name: NAME,
        url: URL,
        description: DESCRIPTION,
        auth: 'signature',
        envopts: [
            ['UPDATES_IMGADM_IDENTITY', 'identity'],
            ['UPDATES_IMGADM_USER', 'user'],
        ]
    });
    cli.main(argv, function (err, verbose) {
        if (err) {
            logerror(err, verbose);
            process.exit(err.exitStatus || 1);
        }
        process.exit(0);
    });
}

if (require.main === module) {
    main(process.argv);
}

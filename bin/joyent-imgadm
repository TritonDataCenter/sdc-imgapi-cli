#!/usr/bin/env node
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2014, Joyent, Inc.
 */

/*
 * CLI for working with the central Joyent Images API:
 *      https://images.joyent.com.
 */

var format = require('util').format;
var CLI = require('../lib/cli');


//---- globals

var NAME = 'joyent-imgadm';
var URL = 'https://images.joyent.com';
var DESCRIPTION = (
    'Manage images on the central Joyent Images API (https://images.joyent.com).\n'
    + '\n'
    + 'Authentication is required for any modifying endpoints (adding images,\n'
    + 'etc.). To get access, you must have your username and key added\n'
    + 'by the Images API administrator. Then set the following in your\n'
    + 'environment (presuming "~/.ssh/id_rsa.pub" is the key you provided):\n'
    + '\n'
    + '    export JOYENT_IMGADM_USER=<given username>\n'
    + '    export JOYENT_IMGADM_IDENTITY=`ssh-keygen -l -f ~/.ssh/id_rsa.pub \\\n'
    + '        | awk \'{print $2}\' | tr -d \'\\n\'`\n'
    + '\n'
    + 'If setup correctly, `joyent-imgadm ping` should work (prints "pong").\n'
    );
var FEATURES = [];


//---- support stuff

function logerror(err, verbose) {
    if (err.code) {
        console.error(format('%s: error (%s): %s', NAME, err.code,
            err.message));
    } else {
        console.error(format('%s: error: %s', NAME, err.message));
    }
    if (verbose && err.stack) {
        console.error('\n' + err.stack);
    }
}



//---- mainline

function main(argv) {
    var cli = new CLI({
        name: NAME,
        url: URL,
        description: DESCRIPTION,
        auth: 'signature',
        features: FEATURES,
        envopts: [
            ['JOYENT_IMGADM_IDENTITY', 'identity'],
            ['JOYENT_IMGADM_USER', 'user']
        ],
        connectTimeout: 10000
    });
    cli.main(argv, function (err, verbose) {
        if (err) {
            logerror(err, verbose);
            process.exit(err.exitStatus || 1);
        }
        process.exit(0);
    });
}

if (require.main === module) {
    main(process.argv);
}
